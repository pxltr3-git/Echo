---
interface Props {
	title: string;
    description?: string;
    keywords?: string;
    ogUrl?: string;
    ogImage?: string;
    twitterUrl?: string;
    twitterImage?: string;
}

const { 
    title,
    description = "Welcome to Echo, the personal portfolio of John Ogletree. Explore my creations in web design, development, and digital strategy.",
    keywords = "John Ogletree, Portfolio, Web Developer, UI/UX Designer, Digital Creator, Astro, JavaScript, Georgia",
    ogUrl = "https://example.com/",
    ogImage = "https://example.com/social-preview.png",
    twitterUrl = "https://example.com/",
    twitterImage = "https://example.com/social-preview.png"
} = Astro.props;
---

<!doctype html>
<html lang="en" class="scroll-smooth scroll-pt-20">
	<head>
		<!-- Primary Meta Tags -->
		<title>{title}</title>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="description" content={description} />
		<meta name="keywords" content={keywords} />
		<meta name="author" content="John Ogletree" />

		<!-- Favicon -->
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />

		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta property="og:url" content={ogUrl} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={ogImage} />

		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content={twitterUrl} />
		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<meta property="twitter:image" content={twitterImage} />
	
	</head>
	<body class="bg-bg text-text font-mono text-base leading-relaxed m-0 p-0 transition-transform duration-300 ease-in-out">
    <div class="readme-container">
        <header class="sticky top-0 z-10 flex w-full items-center justify-between border-b border-border bg-surface p-4 px-4 md:px-8">
            <div class="flex items-center gap-4">
                <div class="flex items-center gap-2 text-xl">
                    <svg class="fill-text-light" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 0 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Z"></path></svg>
                    <a href="/" class="font-bold no-underline hover:underline">Echo</a>
                </div>
            </div>
            <nav class="hidden md:flex items-center gap-6">
                <a href="/" class="text-text hover:text-accent transition-colors duration-200">Start</a>
                <a href="/profile" class="text-text hover:text-accent transition-colors duration-200">Profile</a>
                <a href="/capabilities" class="text-text hover:text-accent transition-colors duration-200">Capabilities</a>
                <a href="/creations" class="text-text hover:text-accent transition-colors duration-200">Creations</a>
                <a href="/connect" class="text-text hover:text-accent transition-colors duration-200">Connect</a>
                <a href="/log" class="text-text hover:text-accent transition-colors duration-200">Log</a>
                <a href="/credentials" class="text-text hover:text-accent transition-colors duration-200">Credentials</a>
                <a href="/faq" class="text-text hover:text-accent transition-colors duration-200">FAQ</a>
            </nav>
            <button id="mobile-menu-button" class="md:hidden text-text focus:outline-none">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
            </button>
        </header>
        <!-- Mobile Menu Overlay (hidden by default) -->
        <div id="mobile-menu-overlay" class="md:hidden fixed inset-0 bg-surface bg-opacity-95 z-40 hidden">
            <div class="flex justify-end p-4">
                <button id="close-mobile-menu" class="text-text focus:outline-none">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <nav class="flex flex-col items-center gap-6 py-8">
                <a href="/" class="text-text text-2xl hover:text-accent transition-colors duration-200">Start</a>
                <a href="/profile" class="text-text text-2xl hover:text-accent transition-colors duration-200">Profile</a>
                <a href="/capabilities" class="text-text text-2xl hover:text-accent transition-colors duration-200">Capabilities</a>
                <a href="/creations" class="text-text text-2xl hover:text-accent transition-colors duration-200">Creations</a>
                <a href="/connect" class="text-text text-2xl hover:text-accent transition-colors duration-200">Connect</a>
                <a href="/log" class="text-text text-2xl hover:text-accent transition-colors duration-200">Log</a>
                <a href="/credentials" class="text-text text-2xl hover:text-accent transition-colors duration-200">Credentials</a>
                <a href="/faq" class="text-text text-2xl hover:text-accent transition-colors duration-200">FAQ</a>
            </nav>
        </div>

        <script is:inline>
            document.addEventListener('DOMContentLoaded', () => {
                const mobileMenuButton = document.getElementById('mobile-menu-button');
                const closeMobileMenuButton = document.getElementById('close-mobile-menu');
                const mobileMenuOverlay = document.getElementById('mobile-menu-overlay');

                if (mobileMenuButton && mobileMenuOverlay && closeMobileMenuButton) {
                    mobileMenuButton.addEventListener('click', () => {
                        mobileMenuOverlay.classList.remove('hidden');
                    });

                    closeMobileMenuButton.addEventListener('click', () => {
                        mobileMenuOverlay.classList.add('hidden');
                    });

                    // Close menu when a link is clicked
                    mobileMenuOverlay.querySelectorAll('a').forEach(link => {
                        link.addEventListener('click', () => {
                            mobileMenuOverlay.classList.add('hidden');
                        });
                    });
                }
            });
        </script>

        <main class="mx-auto px-4 py-4 pb-8 transition-filter duration-300 ease-in-out md:px-6 lg:px-8">
            <slot />
        </main>
    </div>

<script is:inline>
    // Original script for nav drawer and year
    // document.addEventListener('DOMContentLoaded', function() {
    //     const navToggle = document.getElementById('nav-toggle');
    //     const navDrawer = document.getElementById('nav-drawer-container');
    //     const navClose = document.querySelector('.nav-close');
    //     const body = document.body;
    //     function toggleMobileNav() {
    //         const isOpen = navDrawer.classList.contains('is-open');
    //         navDrawer.classList.toggle('is-open', !isOpen);
    //         navToggle.setAttribute('aria-expanded', !isOpen);
    //         body.classList.toggle('no-scroll', !isOpen);
    //     }

    //     if (navToggle && navDrawer) {
    //         navToggle.addEventListener('click', toggleMobileNav);
    //         navClose.addEventListener('click', toggleMobileNav);
    //     }

    //     const navLinks = document.querySelectorAll('.nav-links a');
    //     navLinks.forEach(link => {
    //         link.addEventListener('click', (event) => {
    //             if (link.classList.contains('nav-dropdown-toggle')) return;
    //             if (navDrawer.classList.contains('is-open')) {
    //                 toggleMobileNav();
    //             }
    //         });
    //     });

    // New script for dynamic cards
    document.addEventListener('DOMContentLoaded', function() {
        // --- Profile Card Logic ---
        const profileCard = document.getElementById('profile-card');
        if (profileCard) {
            const animateStats = () => {
                const statValues = profileCard.querySelectorAll('.stat-value[data-value]');
                statValues.forEach(stat => {
                    const finalValue = parseInt(stat.getAttribute('data-value'), 10);
                    const duration = 2000;
                    const startTime = performance.now();
                    const animate = (currentTime) => {
                        const elapsedTime = currentTime - startTime;
                        const progress = Math.min(elapsedTime / duration, 1);
                        stat.textContent = Math.floor(progress * finalValue).toLocaleString();
                        if (progress < 1) requestAnimationFrame(animate);
                    };
                    requestAnimationFrame(animate);
                });
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        animateStats();
                        observer.unobserve(entry.target);
                    }
                });
            }, { threshold: 0.5 });
            
            observer.observe(profileCard);
        }

        // --- Animated Skills Logic ---
        const skillItems = document.querySelectorAll('.skill-item');
        const skillObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const progressBar = entry.target.querySelector('.progress-bar');
                    const targetWidth = progressBar.getAttribute('data-width');
                    progressBar.style.width = targetWidth;
                    skillObserver.unobserve(entry.target);
                }
            });
        }, { threshold: 0.5 });

        skillItems.forEach(item => {
            skillObserver.observe(item);
        });
    });

    // --- Terminal Hero Typing Effect ---
    document.addEventListener('DOMContentLoaded', () => {
        const typedTextSpan = document.getElementById("typed-text");
        const terminalOutput = document.getElementById("terminal-output");
        const textToType = "./initialize-portfolio.sh";
        const typeSpeed = 100;

        function type() {
            let i = 0;
            terminalOutput.style.display = 'none'; // Hide output initially
            const typeInterval = setInterval(() => {
                typedTextSpan.textContent += textToType.charAt(i);
                i++;
                if (i > textToType.length -1) {
                    clearInterval(typeInterval);
                    // After typing, show the output
                    setTimeout(() => {
                        terminalOutput.style.display = 'block';
                    }, 300);
                }
            }, typeSpeed);
        }
        
        // Start typing when the element is in view
        const terminalObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if(entry.isIntersecting) {
                    setTimeout(() => type(), 500); // Small delay before starting
                    terminalObserver.unobserve(entry.target);
                }
            });
        }, { threshold: 0.5 });

        if(typedTextSpan) {
            terminalObserver.observe(typedTextSpan);
        }
    });

    // --- Nav Link Active State ---
    document.addEventListener('DOMContentLoaded', () => {
        const currentPath = window.location.pathname;
        const navLinks = document.querySelectorAll('nav a');

        console.log('currentPath', currentPath);

        navLinks.forEach(link => {
            console.log('link.getAttribute("href")', link.getAttribute('href'));
            if (link.getAttribute('href') === currentPath) {
                link.classList.add('current-page');
            }
        });
    });

</script>

</body>
</html>