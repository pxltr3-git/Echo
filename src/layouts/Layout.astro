---
import Navigation from "../components/Navigation.astro";

interface Props {
	title: string;
    description?: string;
    keywords?: string;
    ogUrl?: string;
    ogImage?: string;
    twitterUrl?: string;
    twitterImage?: string;
}

const { 
    title,
    description = "Welcome to Echo, the personal portfolio of John Ogletree. Explore my creations in web design, development, and digital strategy.",
    keywords = "John Ogletree, Portfolio, Web Developer, UI/UX Designer, Digital Creator, Astro, JavaScript, Georgia",
    ogUrl = "https://example.com/",
    ogImage = "https://example.com/social-preview.png",
    twitterUrl = "https://example.com/",
    twitterImage = "https://example.com/social-preview.png"
} = Astro.props;


---

<!doctype html>
<html lang="en" class="scroll-smooth scroll-pt-20">
	<head>
		<!-- Primary Meta Tags -->
		<title>{title}</title>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="description" content={description} />
		<meta name="keywords" content={keywords} />
		<meta name="author" content="John Ogletree" />

		<!-- Favicon -->
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />

		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta property="og:url" content={ogUrl} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={ogImage} />

		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content={twitterUrl} />		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<meta property="twitter:image" content={twitterImage} />
	
	</head>
	<body class="bg-bg text-text font-mono text-base leading-relaxed m-0 p-0 transition-transform duration-300 ease-in-out">
<Navigation />
<slot />
<script is:inline>
    document.addEventListener('DOMContentLoaded', function() {
        // --- Profile Card Logic ---
        const profileCard = document.getElementById('profile-card');
        if (profileCard) {
            const animateStats = () => {
                const statValues = profileCard.querySelectorAll('.stat-value[data-value]');
                statValues.forEach(stat => {
                    const finalValue = parseInt(stat.getAttribute('data-value'), 10);
                    const duration = 2000;
                    const startTime = performance.now();
                    const animate = (currentTime) => {
                        const elapsedTime = currentTime - startTime;
                        const progress = Math.min(elapsedTime / duration, 1);
                        stat.textContent = Math.floor(progress * finalValue).toLocaleString();
                        if (progress < 1) requestAnimationFrame(animate);
                    };
                    requestAnimationFrame(animate);
                });
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        animateStats();
                        observer.unobserve(entry.target);
                    }
                });
            }, { threshold: 0.5 });
            
            observer.observe(profileCard);
        }

        // --- Animated Skills Logic ---
        const skillItems = document.querySelectorAll('.skill-item');
        const skillObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const progressBar = entry.target.querySelector('.progress-bar');
                    const targetWidth = progressBar.getAttribute('data-width');
                    progressBar.style.width = targetWidth;
                    skillObserver.unobserve(entry.target);
                }
            });
        }, { threshold: 0.5 });

        skillItems.forEach(item => {
            skillObserver.observe(item);
        });
    });

    // --- Terminal Hero Typing Effect ---
    document.addEventListener('DOMContentLoaded', () => {
        const typedTextSpan = document.getElementById("typed-text");
        const terminalOutput = document.getElementById("terminal-output");
        const textToType = "./initialize-portfolio.sh";
        const typeSpeed = 100;

        function type() {
            let i = 0;
            terminalOutput.style.display = 'none'; // Hide output initially
            const typeInterval = setInterval(() => {
                typedTextSpan.textContent += textToType.charAt(i);
                i++;
                if (i > textToType.length -1) {
                    clearInterval(typeInterval);
                    // After typing, show the output
                    setTimeout(() => {
                        terminalOutput.style.display = 'block';
                    }, 300);
                }
            }, typeSpeed);
        }
        
        // Start typing when the element is in view
        const terminalObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if(entry.isIntersecting) {
                    setTimeout(() => type(), 500); // Small delay before starting
                    terminalObserver.unobserve(entry.target);
                }
            });
        }, { threshold: 0.5 });

        if(typedTextSpan) {
            terminalObserver.observe(typedTextSpan);
        }
    });

</script>

</body>
</html>